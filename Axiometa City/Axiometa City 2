#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <DS3231.h>
#include <arduinoFFT.h>


#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define DHTPIN 8
#define DHTTYPE DHT11

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

DHT_Unified dht(DHTPIN, DHTTYPE);

const int streetLights = 9;
const int windowLights = 6;

const int trafficLightsOne_RED = A3;
const int trafficLightsOne_YLW = A2;
const int trafficLightsOne_GRN = A1;

const int trafficLightsTwo_RED = 7;
const int trafficLightsTwo_YLW = 5;
const int trafficLightsTwo_GRN = 4;

const int studentLights_GRN = 11;
const int studentLights_BLE = 12;
const int studentLights_RED = 10;

const int buttonTrafficLightOne = 3;
const int buttonTrafficLightTwo = 2;

const int microphonePin = A6;
const int micThreshold = 400;

const int pinLDR = A7;

const int buzzerPin = 16;

//Claping Stuff
int clapThreshold = 150;  // Adjust this threshold based on your environment and microphone sensitivity
int clapCount = 0;
unsigned long lastClapTime = 0;
bool ledsOn = false;

//RTC Stuff
DS3231 myRTC;
bool century = false;
bool h12Flag;
bool pmFlag;
byte alarmDay, alarmHour, alarmMinute, alarmSecond, alarmBits;
bool alarmDy, alarmH12Flag, alarmPmFlag;

//DHT11 Stuff
uint32_t delayMS;

void setup() {

  Serial.begin(9600);
  Wire.begin();

  screenSetup();
  //displayAxiometa();
  displayAxiometaLogo();

  dht.begin();
  sensor_t sensor;
  dht.humidity().getSensor(&sensor);
  delayMS = sensor.min_delay / 1000;

  //traffic lights one
  pinMode(trafficLightsOne_RED, OUTPUT);
  pinMode(trafficLightsOne_YLW, OUTPUT);
  pinMode(trafficLightsOne_GRN, OUTPUT);

  //traffic lights two
  pinMode(trafficLightsTwo_RED, OUTPUT);
  pinMode(trafficLightsTwo_YLW, OUTPUT);
  pinMode(trafficLightsTwo_GRN, OUTPUT);

  //student lights
  pinMode(studentLights_RED, OUTPUT);  //window b
  pinMode(studentLights_GRN, OUTPUT);  //window g
  pinMode(studentLights_BLE, OUTPUT);  //window r

  //street lights
  pinMode(streetLights, OUTPUT);  //street lights

  //Window lights
  pinMode(windowLights, OUTPUT);  //window lights

  //button on traffic light one
  pinMode(buttonTrafficLightOne, INPUT_PULLUP);  // button
  pinMode(buttonTrafficLightTwo, INPUT_PULLUP);  // button

  //buzzer Pin output
  pinMode(buzzerPin, OUTPUT);  // button

  //setTime(); // run it only when needed disable on operation

  //for fun
  ledStatus(studentLights_RED, 1);
}

void loop() {

  demoAll();

  //studentsFlat();

  //trafficLightOne();

  //trafficLightTwo();

  //autoStreetLights();

  //autoWindowLights();

  //DHT11OLED();

  //displayAxiometa();

  //clapLights();

  //serialPrintTime();

  //oledPrintTime();

  //buzzer();

  //scrollThroughColorWheel();

  //setColorE2F14F();

  displayMicIntensity();
}


void demoAll() {

  //autoStreetLights();
  autoWindowLights();
  trafficLightOne();
  trafficLightTwo();
  studentsFlat();
}

void displayMicIntensity() {

  static int peakLevels[5] = {0, 0, 0, 0, 0};  // Array to hold the peak levels for each bar
  const int barWidth = 20;                     // Width of each bar
  const int numBars = 5;                       // Number of bars
  const int spacing = 5;                       // Spacing between bars

  int micValue = analogRead(microphonePin);

  // Define different thresholds for each bar
  int thresholds[numBars] = {100, 150, 200, 250, 300};

  // Clear the display buffer
  display.clearDisplay();

  // Draw the bars
  for (int i = 0; i < numBars; i++) {
    int barHeight = 0;

    // Check if the microphone value exceeds the threshold for this bar
    if (micValue > thresholds[i]) {
      // Map the micValue to screen height minus some padding for the peak line
      barHeight = map(micValue, thresholds[i], 675, 0, SCREEN_HEIGHT - 20);  // Adjust to leave space for text

      // Update the peak level if the current bar height is greater
      if (barHeight > peakLevels[i]) {
        peakLevels[i] = barHeight;
      } else if (peakLevels[i] > 0) {
        peakLevels[i]--;  // Gradually reduce the peak level over time
      }
    }

    // Draw the bar and its peak level
    int x = i * (barWidth + spacing);
    display.fillRect(x, SCREEN_HEIGHT - barHeight - 10, barWidth, barHeight, SSD1306_WHITE); // Adjusted for text
    display.drawLine(x, SCREEN_HEIGHT - peakLevels[i] - 10, x + barWidth, SCREEN_HEIGHT - peakLevels[i] - 10, SSD1306_WHITE);

    // Draw the intensity value under each bar
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(x, SCREEN_HEIGHT - 9);  // Position cursor under the bar
    display.print(micValue);  // Display the current microphone value or the barHeight value
  }

  // Update the display with all the drawn content
  display.display();
}



void setColorE2F14F() {
  int redValue = 255 - 226;    // Inverted Red component of #E2F14F
  int greenValue = 255 - 241;  // Inverted Green component of #E2F14F
  int blueValue = 255 - 79;    // Inverted Blue component of #E2F14F

  analogWrite(studentLights_RED, redValue);
  analogWrite(studentLights_GRN, greenValue);
  analogWrite(studentLights_BLE, blueValue);
}



void scrollThroughColorWheel() {
  int redValue, greenValue, blueValue;

  // Transition from Red to Green (Red -> Yellow -> Green)
  for (int i = 0; i < 256; i++) {
    redValue = 255 - i;
    greenValue = i;
    blueValue = 0;
    setLEDs(redValue, greenValue, blueValue);
    delay(5);  // Adjust delay for speed of transition
  }

  // Transition from Green to Blue (Green -> Cyan -> Blue)
  for (int i = 0; i < 256; i++) {
    redValue = 0;
    greenValue = 255 - i;
    blueValue = i;
    setLEDs(redValue, greenValue, blueValue);
    delay(5);  // Adjust delay for speed of transition
  }

  // Transition from Blue to Red (Blue -> Magenta -> Red)
  for (int i = 0; i < 256; i++) {
    redValue = i;
    greenValue = 0;
    blueValue = 255 - i;
    setLEDs(redValue, greenValue, blueValue);
    delay(5);  // Adjust delay for speed of transition
  }
}

void setLEDs(int redValue, int greenValue, int blueValue) {
  analogWrite(studentLights_RED, redValue);
  analogWrite(studentLights_GRN, greenValue);
  analogWrite(studentLights_BLE, blueValue);
}


void buzzer() {

  //1 is annoying
  digitalWrite(buzzerPin, HIGH);
  delay(1);
  digitalWrite(buzzerPin, LOW);
  delay(1);
}

void oledPrintTime() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(20, 25);
  display.print(myRTC.getHour(h12Flag, pmFlag), DEC);
  display.print(":");
  display.print(myRTC.getMinute(), DEC);
  display.print(":");
  display.println(myRTC.getSecond(), DEC);
  display.display();
}

void clapLights() {
  // Read analog value from the microphone
  int micValue = analogRead(microphonePin);

  // Check for claps
  if (micValue > clapThreshold && millis() - lastClapTime > 200) {
    clapCount++;
    lastClapTime = millis();

    if (clapCount == 2) {
      // Toggle LEDs on/off when two claps are detected
      if (ledsOn) {
        digitalWrite(windowLights, HIGH);
        ledsOn = false;
      } else {
        digitalWrite(windowLights, LOW);
        ledsOn = true;
      }
      clapCount = 0;  // Reset clap count
    }
  }
}

void autoStreetLights() {

  //Serial.println(analogRead(pinLDR));
  if (analogRead(pinLDR) < 300) {
    digitalWrite(streetLights, HIGH);
  } else {
    digitalWrite(streetLights, LOW);
  }
}


void autoWindowLights() {
  //Serial.println(analogRead(pinLDR));
  if (analogRead(pinLDR) < 300) {
    digitalWrite(windowLights, HIGH);
  } else {
    digitalWrite(windowLights, LOW);
  }
}

void trafficLightOne() {
  static unsigned long previousMillis = 0;
  static int state = 0;

  unsigned long currentMillis = millis();

  switch (state) {
    case 0:  // RED light on indefinitely until button is pressed
      digitalWrite(trafficLightsOne_RED, HIGH);
      if (digitalRead(buttonTrafficLightOne) == 0) {
        state = 1;
        previousMillis = currentMillis;
      }
      break;

    case 1:  // Wait 2 seconds with RED on
      if (currentMillis - previousMillis >= 2000) {
        digitalWrite(trafficLightsOne_RED, LOW);
        digitalWrite(trafficLightsOne_YLW, HIGH);
        state = 2;
        previousMillis = currentMillis;
      }
      break;

    case 2:  // YELLOW light on for 1 second
      if (currentMillis - previousMillis >= 1000) {
        digitalWrite(trafficLightsOne_YLW, LOW);
        digitalWrite(trafficLightsOne_GRN, HIGH);
        state = 3;
        previousMillis = currentMillis;
      }
      break;

    case 3:  // GREEN light on for 2 seconds
      if (currentMillis - previousMillis >= 2000) {
        digitalWrite(trafficLightsOne_GRN, LOW);
        state = 4;
        previousMillis = currentMillis;
      }
      break;

    case 4:  // YELLOW light on for 1 second after GREEN
      digitalWrite(trafficLightsOne_YLW, HIGH);
      if (currentMillis - previousMillis >= 1000) {
        digitalWrite(trafficLightsOne_YLW, LOW);
        state = 0;  // Go back to RED state
      }
      break;
  }
}


void trafficLightTwo() {
  static unsigned long previousMillis = 0;
  static int state = 0;

  unsigned long currentMillis = millis();

  switch (state) {
    case 0:  // RED light on indefinitely until button is pressed
      digitalWrite(trafficLightsTwo_RED, HIGH);
      if (digitalRead(buttonTrafficLightTwo) == 0) {
        state = 1;
        previousMillis = currentMillis;
      }
      break;

    case 1:  // Wait 2 seconds with RED on
      if (currentMillis - previousMillis >= 2000) {
        digitalWrite(trafficLightsTwo_RED, LOW);
        digitalWrite(trafficLightsTwo_YLW, HIGH);
        state = 2;
        previousMillis = currentMillis;
      }
      break;

    case 2:  // YELLOW light on for 1 second
      if (currentMillis - previousMillis >= 1000) {
        digitalWrite(trafficLightsTwo_YLW, LOW);
        digitalWrite(trafficLightsTwo_GRN, HIGH);
        state = 3;
        previousMillis = currentMillis;
      }
      break;

    case 3:  // GREEN light on for 2 seconds
      if (currentMillis - previousMillis >= 2000) {
        digitalWrite(trafficLightsTwo_GRN, LOW);
        state = 4;
        previousMillis = currentMillis;
      }
      break;

    case 4:  // YELLOW light on for 1 second after GREEN
      digitalWrite(trafficLightsTwo_YLW, HIGH);
      if (currentMillis - previousMillis >= 1000) {
        digitalWrite(trafficLightsTwo_YLW, LOW);
        state = 0;  // Go back to RED state
      }
      break;
  }
}

void studentsFlat() {
  static int redValue = 0;
  static int greenValue = 0;
  static int blueValue = 0;
  static bool newColorNeeded = true;

  int micValue = analogRead(microphonePin);

  // Check if a new color needs to be generated based on sound input
  if (micValue > micThreshold && newColorNeeded) {
    int randomColor = random(0, 6);  // Generates a random number from 0 to 5

    switch (randomColor) {
      case 0:
        redValue = 255; greenValue = 0; blueValue = 0;  // Red
        break;
      case 1:
        redValue = 0; greenValue = 255; blueValue = 0;  // Green
        break;
      case 2:
        redValue = 0; greenValue = 0; blueValue = 255;  // Blue
        break;
      case 3:
        redValue = 255; greenValue = 255; blueValue = 0;  // Yellow (Red + Green)
        break;
      case 4:
        redValue = 255; greenValue = 0; blueValue = 255;  // Magenta (Red + Blue)
        break;
      case 5:
        redValue = 0; greenValue = 255; blueValue = 255;  // Cyan (Green + Blue)
        break;
    }

    // Invert the values for active-low LEDs
    redValue = 255 - redValue;
    greenValue = 255 - greenValue;
    blueValue = 255 - blueValue;

    newColorNeeded = false;  // Ensure a new color is not generated until the next cycle
  }

  // Apply the current color to the LEDs
  analogWrite(studentLights_RED, redValue);
  analogWrite(studentLights_GRN, greenValue);
  analogWrite(studentLights_BLE, blueValue);

  // Reset color selection if sound is below threshold (or LEDs turn off)
  if (micValue <= micThreshold) {
    newColorNeeded = true;
    analogWrite(studentLights_RED, 255);  // Off for active-low LEDs
    analogWrite(studentLights_GRN, 255);  // Off for active-low LEDs
    analogWrite(studentLights_BLE, 255);  // Off for active-low LEDs
  }
}






void blinkLED(int blinkingLEDPin) {
  for (unsigned int i = 0; i < 5; i++) {
    digitalWrite(blinkingLEDPin, HIGH);
    delay(500);
    digitalWrite(blinkingLEDPin, LOW);
    delay(500);
  }
}

void screenSetup() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  delay(2000);
  display.clearDisplay();
}

void displayAxiometa() {
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(30, 10);
  // Display static text
  display.println("AXIO");
  display.setCursor(30, 40);
  display.println("META");

  display.display();
}

void DHT11OLED() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  delay(delayMS);
  // Get temperature event and print its value.
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
  } else {
    display.setCursor(0, 25);
    display.print("Temp: ");
    display.println(event.temperature - 2.7, 1);

    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("°C"));
  }
  display.display();
}

void setTime() {
  myRTC.setClockMode(false);  // set to 24h
  //setClockMode(true); // set to 12h
  myRTC.setYear(2024);
  myRTC.setMonth(1);
  myRTC.setDate(23);
  myRTC.setDoW(2);
  myRTC.setHour(1);
  myRTC.setMinute(4);
  myRTC.setSecond(10);
}

void serialPrintTime() {
  Serial.print(myRTC.getHour(h12Flag, pmFlag), DEC);
  Serial.print(":");
  Serial.print(myRTC.getMinute(), DEC);
  Serial.print(":");
  Serial.println(myRTC.getSecond(), DEC);
}

void ledStatus(int LED, int status) {
  if (status == 1) {
    digitalWrite(LED, HIGH);
  } else if (status == 0) {
    digitalWrite(LED, LOW);
  } else {
    //dunno
  }
}

// '~CAD', 128x64px
const unsigned char axiometaLogo_CAD[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xf0, 0x00, 0x00, 0x0f, 0xe7, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xf8, 0x00, 0x00, 0x0f, 0xe7, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe3, 0xfc, 0x00, 0x00, 0x1f, 0xc7, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xfe, 0x00, 0x00, 0x3f, 0x87, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0xfe, 0x00, 0x00, 0x7f, 0x87, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0xff, 0x00, 0x00, 0x7f, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x7f, 0x80, 0x00, 0xfe, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x3f, 0x80, 0x01, 0xfc, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x3f, 0xc0, 0x03, 0xfc, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x1f, 0xe0, 0x03, 0xf8, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x0f, 0xf0, 0x07, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xf0, 0x0f, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xf8, 0x0f, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xfc, 0x1f, 0xc0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x01, 0xfe, 0x3f, 0x80, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x01, 0xfe, 0x7f, 0x80, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x7f, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x1f, 0xf8, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x7f, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int axiometaLogoallArray_LEN = 1;
const unsigned char* axiometaLogoallArray[1] = {
  axiometaLogo_CAD
};


void displayAxiometaLogo() {
  display.clearDisplay();
  display.drawBitmap(0, 0, axiometaLogo_CAD, 128, 64, WHITE);
  display.display();
}
